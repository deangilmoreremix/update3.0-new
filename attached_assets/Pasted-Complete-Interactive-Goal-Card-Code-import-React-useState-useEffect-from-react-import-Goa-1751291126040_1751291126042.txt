Complete Interactive Goal Card Code
import React, { useState, useEffect } from 'react';
import { Goal } from '../types/goals';
import { 
  Clock, 
  TrendingUp, 
  Users, 
  Zap, 
  Play,
  Eye,
  CheckCircle,
  Loader,
  Star,
  Target,
  Shield,
  Brain,
  Activity,
  Bot,
  Settings,
  Sparkles,
  FileText,
  BarChart3,
  ArrowRight,
  Rocket,
  Globe,
  Award,
  AlertCircle,
  Calendar,
  Timer
} from 'lucide-react';
interface InteractiveGoalCardProps {
  goal: Goal;
  onExecute: (goal: Goal) => void;
  isExecuting?: boolean;
  executionProgress?: number;
  realMode?: boolean;
}
const InteractiveGoalCard: React.FC<InteractiveGoalCardProps> = ({
  goal,
  onExecute,
  isExecuting = false,
  executionProgress = 0,
  realMode = false
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [liveMetrics, setLiveMetrics] = useState({
    estimatedValue: Math.floor(Math.random() * 50000) + 10000,
    timeToComplete: Math.floor(Math.random() * 30) + 5,
    confidence: Math.floor(Math.random() * 20) + 80,
    agentsRequired: Math.floor(Math.random() * 5) + 2
  });
  // Simulate live metrics updates during execution
  useEffect(() => {
    if (isExecuting) {
      const interval = setInterval(() => {
        setLiveMetrics(prev => ({
          ...prev,
          estimatedValue: prev.estimatedValue + Math.floor(Math.random() * 1000),
          timeToComplete: Math.max(1, prev.timeToComplete - 1),
          confidence: Math.min(99, prev.confidence + Math.floor(Math.random() * 3)),
          agentsRequired: prev.agentsRequired
        }));
      }, 2000);
      return () => clearInterval(interval);
    }
  }, [isExecuting]);
  // Color system based on priority
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'High': return 'from-red-500 to-orange-500';
      case 'Medium': return 'from-yellow-500 to-orange-500';
      case 'Low': return 'from-green-500 to-emerald-500';
      default: return 'from-gray-500 to-slate-500';
    }
  };
  const getPriorityTextColor = (priority: string) => {
    switch (priority) {
      case 'High': return 'text-red-600 dark:text-red-400';
      case 'Medium': return 'text-yellow-600 dark:text-yellow-400';
      case 'Low': return 'text-green-600 dark:text-green-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };
  // Icon system based on complexity
  const getComplexityIcon = (complexity: string) => {
    switch (complexity) {
      case 'Simple': return <Zap className="h-4 w-4" />;
      case 'Intermediate': return <Target className="h-4 w-4" />;
      case 'Advanced': return <Star className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };
  // Category-based color and icon system
  const getCategoryColor = (category: string) => {
    switch (category.toLowerCase()) {
      case 'sales': return 'from-blue-500 to-cyan-500';
      case 'marketing': return 'from-purple-500 to-pink-500';
      case 'relationship': return 'from-green-500 to-teal-500';
      case 'automation': return 'from-orange-500 to-amber-500';
      case 'analytics': return 'from-teal-500 to-cyan-500';
      case 'content': return 'from-yellow-500 to-orange-500';
      case 'admin': return 'from-indigo-500 to-purple-500';
      case 'ai-native': return 'from-pink-500 to-rose-500';
      default: return 'from-gray-500 to-slate-500';
    }
  };
  const getCategoryIcon = (category: string) => {
    switch (category.toLowerCase()) {
      case 'sales': return <Target className="h-5 w-5" />;
      case 'marketing': return <Rocket className="h-5 w-5" />;
      case 'relationship': return <Users className="h-5 w-5" />;
      case 'automation': return <Bot className="h-5 w-5" />;
      case 'analytics': return <BarChart3 className="h-5 w-5" />;
      case 'content': return <Globe className="h-5 w-5" />;
      case 'admin': return <Settings className="h-5 w-5" />;
      case 'ai-native': return <Brain className="h-5 w-5" />;
      default: return <FileText className="h-5 w-5" />;
    }
  };
  return (
    <div 
      className={`relative group cursor-pointer transition-all duration-500 transform ${
        isHovered ? 'scale-105 z-20' : ''
      } ${isExecuting ? 'ring-4 ring-blue-500/50 ring-offset-4 ring-offset-transparent' : ''}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* DESIGN ELEMENT 1: Glowing Background Effect */}
      <div className={`absolute -inset-1 bg-gradient-to-r ${getCategoryColor(goal.category)} rounded-3xl blur opacity-0 group-hover:opacity-20 transition-opacity duration-500`}></div>
      
      {/* DESIGN ELEMENT 2: Main Card Container */}
      <div className={`relative bg-white dark:bg-slate-800 rounded-2xl border-2 border-gray-200 dark:border-slate-700 shadow-xl hover:shadow-2xl transition-all duration-500 overflow-hidden ${
        isExecuting ? 'border-blue-500 dark:border-blue-400' : ''
      }`}>
        
        {/* DESIGN ELEMENT 3: Execution Progress Bar */}
        {isExecuting && (
          <div className="absolute top-0 left-0 right-0 h-1 bg-gray-200 dark:bg-slate-700">
            <div 
              className="h-full bg-gradient-to-r from-blue-500 to-purple-600 transition-all duration-300"
              style={{ width: `${executionProgress}%` }}
            />
          </div>
        )}
        {/* DESIGN ELEMENT 4: Category Badge */}
        <div className="absolute top-4 right-4 z-10">
          <div className={`inline-flex items-center gap-1 px-3 py-1 rounded-full bg-gradient-to-r ${getCategoryColor(goal.category)} text-white text-xs font-bold shadow-lg`}>
            {getCategoryIcon(goal.category)}
            <span>{goal.category}</span>
          </div>
        </div>
        {/* DESIGN ELEMENT 5: Card Content */}
        <div className="p-6 space-y-4">
          {/* Header Section */}
          <div className="space-y-3">
            <div className="flex items-start justify-between">
              <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 leading-tight pr-20">
                {goal.title}
              </h3>
            </div>
            
            <p className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed line-clamp-3">
              {goal.description}
            </p>
          </div>
          {/* DESIGN ELEMENT 6: Live Metrics Row */}
          <div className="grid grid-cols-2 gap-3 py-3 border-y border-gray-100 dark:border-slate-700">
            <div className="text-center">
              <div className="text-sm font-bold text-gray-900 dark:text-gray-100">
                ${liveMetrics.estimatedValue.toLocaleString()}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400">Est. Value</div>
            </div>
            <div className="text-center">
              <div className="text-sm font-bold text-gray-900 dark:text-gray-100 flex items-center justify-center gap-1">
                <Timer className="h-3 w-3" />
                {liveMetrics.timeToComplete}m
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400">Time</div>
            </div>
          </div>
          {/* DESIGN ELEMENT 7: Goal Properties */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className={`p-1 rounded-lg bg-gradient-to-r ${getPriorityColor(goal.priority)}`}>
                  <TrendingUp className="h-3 w-3 text-white" />
                </div>
                <span className={`text-xs font-semibold ${getPriorityTextColor(goal.priority)}`}>
                  {goal.priority} Priority
                </span>
              </div>
              
              <div className="flex items-center gap-2">
                {getComplexityIcon(goal.complexity)}
                <span className="text-xs font-medium text-gray-600 dark:text-gray-400">
                  {goal.complexity}
                </span>
              </div>
            </div>
            {/* DESIGN ELEMENT 8: Tools and Agents */}
            <div className="space-y-2">
              <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                <Bot className="h-3 w-3" />
                <span>{liveMetrics.agentsRequired} AI Agents Required</span>
              </div>
              
              {goal.tools && goal.tools.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {goal.tools.slice(0, 3).map((tool, index) => (
                    <span 
                      key={index}
                      className="px-2 py-1 bg-gray-100 dark:bg-slate-700 text-gray-700 dark:text-gray-300 text-xs rounded-md font-medium"
                    >
                      {tool}
                    </span>
                  ))}
                  {goal.tools.length > 3 && (
                    <span className="px-2 py-1 bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-400 text-xs rounded-md">
                      +{goal.tools.length - 3} more
                    </span>
                  )}
                </div>
              )}
            </div>
          </div>
          {/* DESIGN ELEMENT 9: Live Stats (when executing) */}
          {isExecuting && (
            <div className="bg-blue-50 dark:bg-blue-900/20 rounded-xl p-4 border border-blue-200 dark:border-blue-700/50">
              <div className="flex items-center gap-2 mb-3">
                <Activity className="h-4 w-4 text-blue-600 dark:text-blue-400 animate-pulse" />
                <span className="text-sm font-bold text-blue-800 dark:text-blue-200">
                  Executing Now
                </span>
              </div>
              
              <div className="grid grid-cols-2 gap-3 text-xs">
                <div>
                  <div className="text-blue-600 dark:text-blue-400 font-bold">
                    {Math.round(executionProgress)}%
                  </div>
                  <div className="text-blue-500 dark:text-blue-500">Progress</div>
                </div>
                <div>
                  <div className="text-blue-600 dark:text-blue-400 font-bold">
                    {liveMetrics.confidence}%
                  </div>
                  <div className="text-blue-500 dark:text-blue-500">Confidence</div>
                </div>
              </div>
            </div>
          )}
          {/* DESIGN ELEMENT 10: Action Buttons */}
          <div className="pt-2">
            {!isExecuting ? (
              <button
                onClick={() => onExecute(goal)}
                className={`w-full py-3 px-4 rounded-xl font-bold text-white transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl ${
                  realMode 
                    ? 'bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700' 
                    : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700'
                } flex items-center justify-center gap-2`}
              >
                <Play className="h-4 w-4" />
                {realMode ? 'Execute Live' : 'Execute Goal'}
                <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform" />
              </button>
            ) : (
              <div className="w-full py-3 px-4 rounded-xl bg-blue-600 text-white flex items-center justify-center gap-3">
                <Loader className="h-4 w-4 animate-spin" />
                <span className="font-bold">Executing...</span>
                <span className="text-blue-200 text-sm">{Math.round(executionProgress)}%</span>
              </div>
            )}
          </div>
          {/* DESIGN ELEMENT 11: Quick Preview Button */}
          {!isExecuting && (
            <button
              onClick={() => setShowDetails(!showDetails)}
              className="w-full py-2 px-4 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors flex items-center justify-center gap-2"
            >
              <Eye className="h-3 w-3" />
              {showDetails ? 'Hide Details' : 'Preview Goal Steps'}
            </button>
          )}
        </div>
        {/* DESIGN ELEMENT 12: Execution Mode Indicator */}
        {realMode && (
          <div className="absolute top-2 left-2">
            <div className="flex items-center gap-1 px-2 py-1 bg-red-500/20 border border-red-500/30 rounded-full">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              <span className="text-red-600 dark:text-red-400 text-xs font-bold">LIVE</span>
            </div>
          </div>
        )}
        {/* DESIGN ELEMENT 13: Success State Overlay */}
        {executionProgress === 100 && (
          <div className="absolute inset-0 bg-green-500/10 backdrop-blur-sm rounded-2xl flex items-center justify-center">
            <div className="bg-white dark:bg-slate-800 p-6 rounded-xl shadow-2xl border border-green-500/50">
              <div className="text-center space-y-3">
                <CheckCircle className="h-12 w-12 text-green-500 mx-auto" />
                <div className="text-lg font-bold text-gray-900 dark:text-gray-100">
                  Goal Completed!
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Value Generated: ${liveMetrics.estimatedValue.toLocaleString()}
                </div>
              </div>
            </div>
          </div>
        )}
        {/* DESIGN ELEMENT 14: Hover Effects */}
        <div className={`absolute inset-0 bg-gradient-to-r ${getCategoryColor(goal.category)} opacity-0 group-hover:opacity-5 rounded-2xl transition-opacity duration-500 pointer-events-none`}></div>
      </div>
      {/* DESIGN ELEMENT 15: Details Popover */}
      {showDetails && !isExecuting && (
        <div className="absolute top-full left-0 right-0 mt-2 z-30 bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-gray-200 dark:border-slate-700 p-4 space-y-3">
          <h4 className="font-bold text-gray-900 dark:text-gray-100 text-sm">Execution Steps:</h4>
          <div className="space-y-2">
            {goal.steps?.slice(0, 3).map((step, index) => (
              <div key={index} className="flex items-start gap-3 text-xs">
                <div className={`w-5 h-5 rounded-full bg-gradient-to-r ${getCategoryColor(goal.category)} flex items-center justify-center text-white font-bold flex-shrink-0`}>
                  {index + 1}
                </div>
                <span className="text-gray-700 dark:text-gray-300 leading-relaxed">{step}</span>
              </div>
            )) || (
              <div className="text-gray-500 dark:text-gray-400 text-xs italic">
                Steps will be generated during execution
              </div>
            )}
          </div>
          
          {goal.expectedOutcome && (
            <div className="pt-3 border-t border-gray-100 dark:border-slate-700">
              <div className="flex items-center gap-2 mb-2">
                <Award className="h-3 w-3 text-green-600 dark:text-green-400" />
                <span className="text-xs font-bold text-green-700 dark:text-green-300">Expected Outcome:</span>
              </div>
              <p className="text-xs text-gray-600 dark:text-gray-400 leading-relaxed">
                {goal.expectedOutcome}
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
export default InteractiveGoalCard;
Design System Explanation
1. Layout Architecture
The card uses a layered design approach:

Background Layer: Hover glow effects and gradients
Main Container: White/dark card with rounded corners and shadows
Content Layer: All interactive elements and text
Overlay Layer: Progress bars, badges, and success states
2. Color System
// Category-based color coding
const getCategoryColor = (category: string) => {
  switch (category.toLowerCase()) {
    case 'sales': return 'from-blue-500 to-cyan-500';
    case 'marketing': return 'from-purple-500 to-pink-500';
    // Each category gets unique gradient colors
  }
};
Design Purpose: Visual categorization and brand consistency

3. State-Based Styling
The card has 5 distinct visual states:

Idle: Clean, minimal appearance
Hovered: Scale up, glow effect, show details
Executing: Progress bar, pulsing animations, live metrics
Completed: Success overlay with celebration animation
Live Mode: Red warning indicator for real execution
4. Interactive Elements
// Hover state management
const [isHovered, setIsHovered] = useState(false);
// Dynamic styling based on state
className={`transition-all duration-500 transform ${
  isHovered ? 'scale-105 z-20' : ''
}`}
5. Animation System
Scale Transform: Cards grow on hover (scale-105)
Opacity Transitions: Smooth fade effects for backgrounds
Progress Animations: Smooth bar filling during execution
Pulse Effects: Breathing animations for active elements
6. Information Hierarchy
The card organizes information in visual priority order:

Goal Title (largest, bold)
Category Badge (top-right, colored)
Description (secondary text)
Live Metrics (bordered section)
Properties (priority, complexity)
Action Button (prominent, gradient)
7. Responsive Design
Flexible Layout: Grid system adapts to screen size
Text Scaling: Responsive typography
Touch Targets: Large buttons for mobile
Icon Sizing: Scalable vector icons
8. Dark Mode Support
// Complete dark mode theming
className="bg-white dark:bg-slate-800 text-gray-900 dark:text-gray-100"
Every element has light and dark variants for consistent theming.

9. Live Data Integration
// Real-time metrics updates
useEffect(() => {
  if (isExecuting) {
    const interval = setInterval(() => {
      setLiveMetrics(prev => ({
        estimatedValue: prev.estimatedValue + Math.floor(Math.random() * 1000),
        confidence: Math.min(99, prev.confidence + Math.floor(Math.random() * 3))
      }));
    }, 2000);
  }
}, [isExecuting]);
Purpose: Creates impression of live AI processing with updating metrics.

This design system creates professional business software appearance while maintaining modern UI trends like glass morphism, gradient overlays, and smooth animations. Each card feels like a mini-dashboard showing the power and sophistication of AI automation.