import { OpenAI } from 'openai';

// MCP Function Schema Interface
interface MCPFunction {
  name: string;
  description: string;
  parameters: {
    type: 'object';
    properties: Record<string, {
      type: string;
      description: string;
      enum?: string[];
    }>;
    required: string[];
  };
}

// MCP Agent Metadata
interface MCPAgentMetadata {
  functions: MCPFunction[];
  model: string;
  temperature: number;
  max_tokens: number;
}

// Function calling result
interface MCPFunctionResult {
  success: boolean;
  result?: any;
  error?: string;
  function_called?: string;
  raw_response?: string;
}

/**
 * MCP (Model Context Protocol) Client for function calling
 * Handles LLM function calling with schema validation and execution
 */
export class MCPClient {
  private openai: OpenAI | null = null;
  private geminiApiKey: string | null = null;

  constructor() {
    // Initialize API keys from environment
    const openaiKey = import.meta.env.VITE_OPENAI_API_KEY;
    const geminiKey = import.meta.env.VITE_GEMINI_API_KEY;

    if (openaiKey) {
      this.openai = new OpenAI({
        apiKey: openaiKey,
        dangerouslyAllowBrowser: true
      });
    }
    
    this.geminiApiKey = geminiKey;
  }

  /**
   * Load MCP agent metadata from server
   */
  private async loadAgentMetadata(agentType: string): Promise<MCPAgentMetadata> {
    try {
      const response = await fetch(`/api/mcp/agents/${agentType}/metadata`);
      if (!response.ok) {
        throw new Error(`Failed to load agent metadata: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Error loading agent metadata:', error);
      // Fallback to default metadata
      return this.getDefaultMetadata(agentType);
    }
  }

  /**
   * Get default MCP metadata for different agent types
   */
  private getDefaultMetadata(agentType: string): MCPAgentMetadata {
    const baseMetadata = {
      model: 'gpt-4o-mini',
      temperature: 0.7,
      max_tokens: 1000
    };

    switch (agentType) {
      case 'composio':
        return {
          ...baseMetadata,
          functions: [
            {
              name: 'send_linkedin_message',
              description: 'Send a personalized message via LinkedIn',
              parameters: {
                type: 'object',
                properties: {
                  recipient_id: {
                    type: 'string',
                    description: 'LinkedIn user ID of the recipient'
                  },
                  message: {
                    type: 'string',
                    description: 'The message content to send'
                  },
                  personalize: {
                    type: 'boolean',
                    description: 'Whether to personalize the message'
                  }
                },
                required: ['recipient_id', 'message']
              }
            },
            {
              name: 'post_to_x',
              description: 'Post content to X (Twitter)',
              parameters: {
                type: 'object',
                properties: {
                  content: {
                    type: 'string',
                    description: 'The content to post'
                  },
                  scheduled_time: {
                    type: 'string',
                    description: 'ISO timestamp for scheduled posting'
                  }
                },
                required: ['content']
              }
            },
            {
              name: 'schedule_reddit_post',
              description: 'Schedule a post to Reddit',
              parameters: {
                type: 'object',
                properties: {
                  subreddit: {
                    type: 'string',
                    description: 'The subreddit to post to'
                  },
                  title: {
                    type: 'string',
                    description: 'The post title'
                  },
                  content: {
                    type: 'string',
                    description: 'The post content'
                  },
                  scheduled_time: {
                    type: 'string',
                    description: 'ISO timestamp for scheduled posting'
                  }
                },
                required: ['subreddit', 'title', 'content']
              }
            },
            {
              name: 'send_automated_email',
              description: 'Send an automated email',
              parameters: {
                type: 'object',
                properties: {
                  to: {
                    type: 'string',
                    description: 'Recipient email address'
                  },
                  subject: {
                    type: 'string',
                    description: 'Email subject line'
                  },
                  content: {
                    type: 'string',
                    description: 'Email content'
                  },
                  template_id: {
                    type: 'string',
                    description: 'Optional email template ID'
                  }
                },
                required: ['to', 'subject', 'content']
              }
            }
          ]
        };

      case 'crm':
        return {
          ...baseMetadata,
          functions: [
            {
              name: 'create_contact',
              description: 'Create a new contact in the CRM',
              parameters: {
                type: 'object',
                properties: {
                  firstName: {
                    type: 'string',
                    description: 'Contact first name'
                  },
                  lastName: {
                    type: 'string',
                    description: 'Contact last name'
                  },
                  email: {
                    type: 'string',
                    description: 'Contact email address'
                  },
                  company: {
                    type: 'string',
                    description: 'Contact company'
                  },
                  phone: {
                    type: 'string',
                    description: 'Contact phone number'
                  }
                },
                required: ['firstName', 'lastName', 'email']
              }
            },
            {
              name: 'update_lead_score',
              description: 'Update the lead score for a contact',
              parameters: {
                type: 'object',
                properties: {
                  contact_id: {
                    type: 'string',
                    description: 'The contact ID'
                  },
                  score: {
                    type: 'number',
                    description: 'The new lead score (0-100)'
                  },
                  reason: {
                    type: 'string',
                    description: 'Reason for the score update'
                  }
                },
                required: ['contact_id', 'score']
              }
            },
            {
              name: 'create_task',
              description: 'Create a new task',
              parameters: {
                type: 'object',
                properties: {
                  title: {
                    type: 'string',
                    description: 'Task title'
                  },
                  description: {
                    type: 'string',
                    description: 'Task description'
                  },
                  due_date: {
                    type: 'string',
                    description: 'Task due date (ISO timestamp)'
                  },
                  priority: {
                    type: 'string',
                    description: 'Task priority',
                    enum: ['low', 'medium', 'high']
                  },
                  related_to_id: {
                    type: 'string',
                    description: 'ID of related contact or deal'
                  }
                },
                required: ['title']
              }
            }
          ]
        };

      default:
        return {
          ...baseMetadata,
          functions: []
        };
    }
  }

  /**
   * Execute a function call through MCP
   */
  private async executeFunction(functionName: string, parameters: any): Promise<any> {
    try {
      const response = await fetch('/api/mcp/execute-function', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          function_name: functionName,
          parameters
        }),
      });

      if (!response.ok) {
        throw new Error(`Function execution failed: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error(`Error executing function ${functionName}:`, error);
      throw error;
    }
  }

  /**
   * Main MCP function calling method
   * Loads schema, sends to LLM with functions, and executes the result
   */
  async callMCP(
    prompt: string,
    agentType: string = 'composio',
    context?: any
  ): Promise<MCPFunctionResult> {
    try {
      // Load agent metadata and schema
      const metadata = await this.loadAgentMetadata(agentType);
      
      if (metadata.functions.length === 0) {
        return {
          success: false,
          error: 'No functions available for this agent type'
        };
      }

      // Prepare the system message with context
      const systemMessage = `You are an AI assistant with access to ${agentType} functions. 
        Use the available functions to help the user accomplish their goals.
        Context: ${JSON.stringify(context || {})}
        
        Available functions: ${metadata.functions.map(f => f.name).join(', ')}`;

      // Try OpenAI first, then fallback to Gemini
      let functionCall;
      let rawResponse;

      if (this.openai) {
        try {
          const response = await this.openai.chat.completions.create({
            model: metadata.model,
            messages: [
              { role: 'system', content: systemMessage },
              { role: 'user', content: prompt }
            ],
            functions: metadata.functions,
            function_call: 'auto',
            temperature: metadata.temperature,
            max_tokens: metadata.max_tokens,
          });

          rawResponse = response.choices[0].message;
          functionCall = rawResponse.function_call;
        } catch (error) {
          console.warn('OpenAI function calling failed, trying Gemini:', error);
        }
      }

      // Fallback to Gemini with manual function parsing
      if (!functionCall && this.geminiApiKey) {
        try {
          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-latest:generateContent?key=${this.geminiApiKey}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              contents: [{
                parts: [{
                  text: `${systemMessage}\n\nUser: ${prompt}\n\nRespond with a function call in this exact JSON format:
                  {
                    "function_call": {
                      "name": "function_name",
                      "arguments": "{\"param1\": \"value1\"}"
                    }
                  }`
                }]
              }],
              generationConfig: {
                temperature: metadata.temperature,
                maxOutputTokens: metadata.max_tokens,
              }
            }),
          });

          if (response.ok) {
            const result = await response.json();
            rawResponse = result.candidates[0].content.parts[0].text;
            
            // Parse Gemini response for function call
            try {
              const parsed = JSON.parse(rawResponse);
              functionCall = parsed.function_call;
            } catch (parseError) {
              console.warn('Could not parse Gemini function call response');
            }
          }
        } catch (error) {
          console.error('Gemini function calling failed:', error);
        }
      }

      // Execute the function if we got a valid call
      if (functionCall && functionCall.name) {
        try {
          const parameters = typeof functionCall.arguments === 'string' 
            ? JSON.parse(functionCall.arguments)
            : functionCall.arguments;

          const result = await this.executeFunction(functionCall.name, parameters);

          return {
            success: true,
            result,
            function_called: functionCall.name,
            raw_response: JSON.stringify(rawResponse)
          };
        } catch (error) {
          return {
            success: false,
            error: `Function execution failed: ${error.message}`,
            function_called: functionCall.name,
            raw_response: JSON.stringify(rawResponse)
          };
        }
      }

      return {
        success: false,
        error: 'No valid function call generated',
        raw_response: JSON.stringify(rawResponse)
      };

    } catch (error) {
      return {
        success: false,
        error: `MCP call failed: ${error.message}`
      };
    }
  }

  /**
   * Validate function parameters against schema
   */
  private validateParameters(functionName: string, parameters: any, schema: MCPFunction): boolean {
    try {
      // Check required parameters
      for (const required of schema.parameters.required) {
        if (!(required in parameters)) {
          throw new Error(`Missing required parameter: ${required}`);
        }
      }

      // Check parameter types
      for (const [key, value] of Object.entries(parameters)) {
        const propertySchema = schema.parameters.properties[key];
        if (!propertySchema) {
          console.warn(`Unknown parameter: ${key}`);
          continue;
        }

        // Basic type checking
        const expectedType = propertySchema.type;
        const actualType = typeof value;
        
        if (expectedType === 'number' && actualType !== 'number') {
          throw new Error(`Parameter ${key} should be a number, got ${actualType}`);
        }
        if (expectedType === 'string' && actualType !== 'string') {
          throw new Error(`Parameter ${key} should be a string, got ${actualType}`);
        }
        if (expectedType === 'boolean' && actualType !== 'boolean') {
          throw new Error(`Parameter ${key} should be a boolean, got ${actualType}`);
        }

        // Enum validation
        if (propertySchema.enum && !propertySchema.enum.includes(value as string)) {
          throw new Error(`Parameter ${key} must be one of: ${propertySchema.enum.join(', ')}`);
        }
      }

      return true;
    } catch (error) {
      console.error(`Parameter validation failed for ${functionName}:`, error);
      return false;
    }
  }
}

// Export the main function for easy use
export async function callMCP(
  prompt: string,
  agentType: string = 'composio',
  context?: any
): Promise<MCPFunctionResult> {
  const client = new MCPClient();
  return await client.callMCP(prompt, agentType, context);
}