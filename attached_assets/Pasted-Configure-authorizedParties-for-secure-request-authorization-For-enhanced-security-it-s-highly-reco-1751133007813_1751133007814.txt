Configure authorizedParties for secure request authorization
For enhanced security, it's highly recommended to explicitly set the authorizedParties option when authorizing requests. This option acts as an allowlist of origins to verify against, protecting your application from subdomain cookie leaking attacks. Without this setting, if an app on another subdomain of the same root domain as your Clerk app is compromised, that app could potentially generate valid sessions for your Clerk app.

The authorizedParties value should include a list of domains allowed to make requests to your application. Omitting this setting can expose your application to CSRF attacks.

Examples
The following examples show how to set authorizedParties with different Clerk helpers.

Set authorizedParties with clerkMiddleware()

clerkMiddleware({
  authorizedParties: ['https://example.com'],
})
Set authorizedParties with authenticateRequest()

clerkClient.authenticateRequest(req, {
  authorizedParties: ['https://example.com'],
})
Deploy certificates
The Clerk Dashboard home page will tell you what steps are still required to deploy your production instance. Once you have completed all of the necessary steps, a Deploy certificates button will appear. Selecting this button will deploy your production instance.

Troubleshooting
DNS records not propagating with Cloudflare
Clerk uses a DNS check to validate this CNAME record. If this subdomain is reverse proxied behind a service that points to generic hostnames, such as Cloudflare, the DNS check will fail. Set the DNS record for this subdomain to a "DNS only" mode on your host to prevent proxying.

Deployment stuck in certificate issuance
If your instance is stuck during TLS certificate issuance for longer than a few minutes, this might be caused due to certain CAA DNS records set on your primary domain.

CAA are DNS records you may set to denote which certificate authorities (CA) are permitted to issue certificates for your domain, as a security measure against certain attacks. When you deploy your application, Clerk attempts to provision certificates using either the LetsEncrypt or Google Trust Services certificate authorities.

Ensure that your primary domain (e.g., example.com) does not have any CAA records that prevent either LetsEncrypt or Google Trust Services from issuing certificates for your domain. To check this, run the following command in your terminal, replacing example.com with your appâ€™s domain:


dig example.com +short CAA
If the command returns an empty response, your domain is correctly configured. If it returns any text, you need to remove the CAA records from your primary domain to avoid potential downtime during certificate renewal.

Incorrect domain
If you accidentally set the wrong domain, you can change it through the Clerk Dashboard or the Backend API. For more information, see the dedicated guide.

Feedback
