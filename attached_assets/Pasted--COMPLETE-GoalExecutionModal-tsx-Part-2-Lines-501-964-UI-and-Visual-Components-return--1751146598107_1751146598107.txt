// COMPLETE GoalExecutionModal.tsx - Part 2 (Lines 501-964) - UI and Visual Components

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/80 backdrop-blur-sm transition-opacity duration-300"
        onClick={onClose}
      />
      
      {/* Modal Container */}
      <div className="relative w-full h-full flex items-center justify-center p-4">
        <div className="relative w-full max-w-6xl h-full max-h-[90vh] bg-gradient-to-br from-gray-50 via-blue-50/20 to-gray-50 rounded-2xl border border-gray-200 overflow-hidden animate-scaleIn shadow-2xl">
          
          {/* Modal Header */}
          <div className="relative z-20 flex items-center justify-between p-4 bg-gradient-to-r from-white/90 to-gray-50/90 backdrop-blur-xl border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-500">
                <Maximize2 className="h-5 w-5 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">{goal.title}</h1>
                <p className="text-gray-600 text-sm">Watch AI agents work in real-time</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {realMode && (
                <div className="flex items-center gap-2 bg-red-500/20 px-3 py-1 rounded-full border border-red-400/30">
                  <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>
                  <span className="text-red-300 font-medium text-xs">LIVE MODE</span>
                </div>
              )}
              
              <button
                onClick={onClose}
                className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-900 transition-all duration-300 group"
                title="Close (ESC)"
              >
                <X className="h-5 w-5 group-hover:rotate-90 transition-transform duration-300" />
              </button>
            </div>
          </div>

          {/* Animated Background */}
          <div className="absolute inset-0 opacity-10">
            {/* Particle System */}
            <div className="absolute inset-0">
              {[...Array(20)].map((_, i) => (
                <div
                  key={i}
                  className="absolute rounded-full bg-blue-400/20 animate-pulse"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    width: `${Math.random() * 3 + 1}px`,
                    height: `${Math.random() * 3 + 1}px`,
                    animationDelay: `${Math.random() * 3}s`,
                    animationDuration: `${Math.random() * 4 + 3}s`
                  }}
                />
              ))}
            </div>

            {/* Data Flow Lines */}
            <div className="absolute inset-0">
              <div className="absolute top-1/3 left-0 right-0 h-px bg-gradient-to-r from-transparent via-blue-500/30 to-transparent animate-pulse"></div>
              <div className="absolute top-2/3 left-0 right-0 h-px bg-gradient-to-r from-transparent via-purple-500/30 to-transparent animate-pulse" style={{animationDelay: '1s'}}></div>
              <div className="absolute top-0 bottom-0 left-1/3 w-px bg-gradient-to-b from-transparent via-blue-500/30 to-transparent animate-pulse" style={{animationDelay: '2s'}}></div>
              <div className="absolute top-0 bottom-0 right-1/3 w-px bg-gradient-to-b from-transparent via-purple-500/30 to-transparent animate-pulse" style={{animationDelay: '3s'}}></div>
            </div>
          </div>
          
          {/* Modal Content */}
          <div className="relative z-10 h-full overflow-auto">
            <div className="p-6 pb-20">
              {/* Execution Control Panel */}
              <div className="grid lg:grid-cols-3 gap-6 mb-8">
                {/* Main Execution Panel */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Goal Overview */}
                  <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h2 className="text-2xl font-bold text-gray-900">Goal Execution</h2>
                      <div className="flex items-center gap-3">
                        {!isExecuting && !goalResults && (
                          <button
                            onClick={executeGoal}
                            className={`px-6 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 ${
                              realMode
                                ? 'bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white'
                                : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white'
                            }`}
                          >
                            <span className="flex items-center gap-2">
                              <Play className="h-5 w-5" />
                              {realMode ? 'Execute Live' : 'Start Demo'}
                            </span>
                          </button>
                        )}
                        
                        {goalResults && (
                          <button
                            onClick={handleComplete}
                            className="px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white rounded-lg font-semibold transition-all duration-300 transform hover:scale-105"
                          >
                            <span className="flex items-center gap-2">
                              <CheckCircle className="h-5 w-5" />
                              Goal Complete
                            </span>
                          </button>
                        )}
                      </div>
                    </div>

                    <div className="text-gray-600 mb-4">{goal.description}</div>
                    
                    {/* Progress Bar */}
                    {isExecuting && (
                      <div className="mb-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-gray-900 font-medium">Overall Progress</span>
                          <span className="text-blue-600 font-bold">{Math.round(overallProgress)}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-4">
                          <div 
                            className="h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-500 relative overflow-hidden"
                            style={{ width: `${overallProgress}%` }}
                          >
                            <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent animate-pulse"></div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Execution Metrics */}
                    <div className="grid grid-cols-4 gap-4">
                      <div className="text-center p-3 bg-white rounded-lg border border-blue-200 shadow-sm">
                        <div className="text-2xl font-bold text-blue-600">{executionMetrics.agentsActive}</div>
                        <div className="text-xs text-gray-600">AI Agents</div>
                      </div>
                      <div className="text-center p-3 bg-white rounded-lg border border-purple-200 shadow-sm">
                        <div className="text-2xl font-bold text-purple-600">{executionMetrics.crmChanges}</div>
                        <div className="text-xs text-gray-600">CRM Updates</div>
                      </div>
                      <div className="text-center p-3 bg-white rounded-lg border border-emerald-200 shadow-sm">
                        <div className="text-2xl font-bold text-emerald-600">${executionMetrics.businessValue.toLocaleString()}</div>
                        <div className="text-xs text-gray-600">Value Added</div>
                      </div>
                      <div className="text-center p-3 bg-white rounded-lg border border-orange-200 shadow-sm">
                        <div className="text-2xl font-bold text-orange-600">{executionMetrics.estimatedDuration}m</div>
                        <div className="text-xs text-gray-600">Duration</div>
                      </div>
                    </div>
                  </div>

                  {/* Enhanced Multi-Agent Network Visualization */}
                  {(isExecuting || Object.values(agentNetwork).some(agent => agent.status !== 'idle')) && (
                    <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                      <h3 className="text-xl font-bold text-gray-900 mb-6 flex items-center gap-2">
                        <Network className="h-6 w-6 text-blue-600" />
                        Multi-Agent Coordination Network
                      </h3>
                      
                      {/* Agent Network Dashboard */}
                      <div className="grid md:grid-cols-5 gap-4 mb-6">
                        {/* Planning Agent */}
                        <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                          agentNetwork.planning.status === 'thinking' ? 'border-blue-400 bg-blue-50 shadow-lg shadow-blue-200' :
                          agentNetwork.planning.status === 'complete' ? 'border-green-400 bg-green-50' :
                          agentNetwork.planning.status === 'error' ? 'border-red-400 bg-red-50' :
                          'border-gray-300 bg-gray-50'
                        }`}>
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center ${
                              agentNetwork.planning.status === 'thinking' ? 'bg-blue-500 animate-pulse' :
                              agentNetwork.planning.status === 'complete' ? 'bg-green-500' :
                              agentNetwork.planning.status === 'error' ? 'bg-red-500' :
                              'bg-gray-500'
                            }`}>
                              <Brain className="h-4 w-4 text-white" />
                            </div>
                            <div className="text-sm font-semibold text-gray-900">Planning Agent</div>
                            <div className="text-xs text-gray-600">{agentNetwork.planning.model || 'Idle'}</div>
                            {agentNetwork.planning.confidence > 0 && (
                              <div className="text-xs text-blue-600 mt-1">{agentNetwork.planning.confidence}% confidence</div>
                            )}
                          </div>
                        </div>

                        {/* Research Agent */}
                        <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                          agentNetwork.research.status === 'thinking' ? 'border-purple-400 bg-purple-500/10 shadow-lg shadow-purple-500/20' :
                          agentNetwork.research.status === 'complete' ? 'border-green-400 bg-green-500/10' :
                          agentNetwork.research.status === 'error' ? 'border-red-400 bg-red-500/10' :
                          'border-gray-600 bg-slate-700/30'
                        }`}>
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center ${
                              agentNetwork.research.status === 'thinking' ? 'bg-purple-500 animate-pulse' :
                              agentNetwork.research.status === 'complete' ? 'bg-green-500' :
                              agentNetwork.research.status === 'error' ? 'bg-red-500' :
                              'bg-gray-500'
                            }`}>
                              <Eye className="h-4 w-4 text-white" />
                            </div>
                            <div className="text-sm font-semibold text-gray-900">Research Agent</div>
                            <div className="text-xs text-gray-600">{agentNetwork.research.model || 'Idle'}</div>
                            {agentNetwork.research.confidence > 0 && (
                              <div className="text-xs text-purple-400 mt-1">{agentNetwork.research.confidence}% confidence</div>
                            )}
                          </div>
                        </div>

                        {/* Content Agent */}
                        <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                          agentNetwork.content.status === 'thinking' ? 'border-orange-400 bg-orange-500/10 shadow-lg shadow-orange-500/20' :
                          agentNetwork.content.status === 'complete' ? 'border-green-400 bg-green-500/10' :
                          agentNetwork.content.status === 'error' ? 'border-red-400 bg-red-500/10' :
                          'border-gray-600 bg-slate-700/30'
                        }`}>
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center ${
                              agentNetwork.content.status === 'thinking' ? 'bg-orange-500 animate-pulse' :
                              agentNetwork.content.status === 'complete' ? 'bg-green-500' :
                              agentNetwork.content.status === 'error' ? 'bg-red-500' :
                              'bg-gray-500'
                            }`}>
                              <MessageSquare className="h-4 w-4 text-white" />
                            </div>
                            <div className="text-sm font-semibold text-gray-900">Content Agent</div>
                            <div className="text-xs text-gray-600">{agentNetwork.content.model || 'Idle'}</div>
                            {agentNetwork.content.confidence > 0 && (
                              <div className="text-xs text-orange-400 mt-1">{agentNetwork.content.confidence}% confidence</div>
                            )}
                          </div>
                        </div>

                        {/* Decision Agent */}
                        <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                          agentNetwork.decision.status === 'thinking' ? 'border-yellow-400 bg-yellow-500/10 shadow-lg shadow-yellow-500/20' :
                          agentNetwork.decision.status === 'complete' ? 'border-green-400 bg-green-500/10' :
                          agentNetwork.decision.status === 'error' ? 'border-red-400 bg-red-500/10' :
                          'border-gray-600 bg-slate-700/30'
                        }`}>
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center ${
                              agentNetwork.decision.status === 'thinking' ? 'bg-yellow-500 animate-pulse' :
                              agentNetwork.decision.status === 'complete' ? 'bg-green-500' :
                              agentNetwork.decision.status === 'error' ? 'bg-red-500' :
                              'bg-gray-500'
                            }`}>
                              <Target className="h-4 w-4 text-white" />
                            </div>
                            <div className="text-sm font-semibold text-gray-900">Decision Agent</div>
                            <div className="text-xs text-gray-600">{agentNetwork.decision.model || 'Idle'}</div>
                            {agentNetwork.decision.confidence > 0 && (
                              <div className="text-xs text-yellow-400 mt-1">{agentNetwork.decision.confidence}% confidence</div>
                            )}
                          </div>
                        </div>

                        {/* Execution Agent */}
                        <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                          agentNetwork.execution.status === 'executing' ? 'border-emerald-400 bg-emerald-500/10 shadow-lg shadow-emerald-500/20' :
                          agentNetwork.execution.status === 'complete' ? 'border-green-400 bg-green-500/10' :
                          agentNetwork.execution.status === 'error' ? 'border-red-400 bg-red-500/10' :
                          'border-gray-600 bg-slate-700/30'
                        }`}>
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center ${
                              agentNetwork.execution.status === 'executing' ? 'bg-emerald-500 animate-pulse' :
                              agentNetwork.execution.status === 'complete' ? 'bg-green-500' :
                              agentNetwork.execution.status === 'error' ? 'bg-red-500' :
                              'bg-gray-500'
                            }`}>
                              <Zap className="h-4 w-4 text-white" />
                            </div>
                            <div className="text-sm font-semibold text-gray-900">Execution Agent</div>
                            <div className="text-xs text-gray-600">Composio Tools</div>
                            {agentNetwork.execution.status === 'executing' && (
                              <div className="text-xs text-emerald-400 mt-1">Tools Active</div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Agent Communications Feed */}
                      {agentCommunications.length > 0 && (
                        <div className="border-t border-gray-200 pt-4">
                          <h4 className="text-sm font-semibold text-gray-700 mb-3">Agent Communications</h4>
                          <div className="space-y-2 max-h-32 overflow-y-auto">
                            {agentCommunications.slice(-3).map((comm, index) => (
                              <div key={index} className="flex items-center gap-2 text-xs bg-gray-50 p-2 rounded">
                                <span className="font-medium text-blue-600">{comm.from}</span>
                                <ArrowRight className="h-3 w-3 text-gray-400" />
                                <span className="font-medium text-purple-600">{comm.to}</span>
                                <span className="text-gray-600">: {comm.message}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Execution Steps */}
                  {executionSteps.length > 0 && (
                    <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                      <h3 className="text-xl font-bold text-gray-900 mb-6 flex items-center gap-2">
                        <GitBranch className="h-6 w-6 text-purple-600" />
                        Execution Timeline
                      </h3>
                      
                      <div className="space-y-4">
                        {executionSteps.map((step, index) => (
                          <div
                            key={step.id}
                            className={`p-4 rounded-lg border transition-all duration-300 ${
                              step.status === 'running' ? 'border-blue-400 bg-blue-50 shadow-md' :
                              step.status === 'completed' ? 'border-green-400 bg-green-50' :
                              step.status === 'error' ? 'border-red-400 bg-red-50' :
                              index === currentStep ? 'border-yellow-400 bg-yellow-50' :
                              'border-gray-200 bg-white'
                            }`}
                          >
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-3">
                                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                  step.status === 'running' ? 'bg-blue-500 animate-pulse' :
                                  step.status === 'completed' ? 'bg-green-500' :
                                  step.status === 'error' ? 'bg-red-500' :
                                  'bg-gray-400'
                                }`}>
                                  {step.status === 'running' ? (
                                    <Activity className="h-4 w-4 text-white animate-spin" />
                                  ) : step.status === 'completed' ? (
                                    <CheckCircle className="h-4 w-4 text-white" />
                                  ) : step.status === 'error' ? (
                                    <XCircle className="h-4 w-4 text-white" />
                                  ) : (
                                    <Clock className="h-4 w-4 text-white" />
                                  )}
                                </div>
                                <div>
                                  <h4 className="font-semibold text-gray-900">{step.agentName}</h4>
                                  <p className="text-sm text-gray-600">{step.action}</p>
                                </div>
                              </div>
                              
                              {step.status === 'completed' && step.toolsUsed && (
                                <div className="flex flex-wrap gap-1">
                                  {step.toolsUsed.slice(0, 2).map((tool, i) => (
                                    <span key={i} className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs">
                                      {tool}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            {step.crmImpact && (
                              <div className="mt-2 p-2 bg-purple-50 rounded text-xs text-purple-700">
                                <span className="font-medium">CRM Impact:</span> {step.crmImpact}
                              </div>
                            )}
                            
                            {step.result && (
                              <div className="mt-2 p-2 bg-green-50 rounded text-xs text-green-700">
                                <span className="font-medium">Result:</span> {step.result}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Live Activity Sidebar */}
                <div className="space-y-6">
                  {/* Live Activity Feed */}
                  <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                    <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
                      <Activity className="h-5 w-5 text-green-600" />
                      Live Activity
                    </h3>
                    
                    <div className="space-y-2 max-h-80 overflow-y-auto">
                      {liveActivity.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <Volume2 className="h-8 w-8 mx-auto mb-2 opacity-50" />
                          <p className="text-sm">Waiting for execution to begin...</p>
                        </div>
                      ) : (
                        liveActivity.map((activity, index) => (
                          <div
                            key={index}
                            className="p-3 bg-gray-50 rounded-lg text-sm animate-fadeIn"
                            style={{ animationDelay: `${index * 0.1}s` }}
                          >
                            {activity}
                          </div>
                        ))
                      )}
                    </div>
                  </div>

                  {/* Chain of Thought */}
                  {chainOfThought.length > 0 && (
                    <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
                        <Brain className="h-5 w-5 text-purple-600" />
                        AI Reasoning
                      </h3>
                      
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {chainOfThought.map((thought, index) => (
                          <div key={index} className="p-2 bg-purple-50 rounded text-xs text-purple-700">
                            {thought}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Goal Results */}
                  {goalResults && (
                    <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6">
                      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
                        <Award className="h-5 w-5 text-gold-600" />
                        Results Summary
                      </h3>
                      
                      <div className="space-y-3">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Success Rate</span>
                          <span className="font-bold text-green-600">
                            {goalResults.success ? '100%' : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Agents Used</span>
                          <span className="font-bold">{goalResults.agentsUsed || 0}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">CRM Changes</span>
                          <span className="font-bold text-blue-600">{goalResults.crmChanges || 0}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Business Value</span>
                          <span className="font-bold text-green-600">
                            ${(goalResults.businessValue || 0).toLocaleString()}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Mode</span>
                          <span className={`font-bold ${goalResults.realMode ? 'text-red-600' : 'text-blue-600'}`}>
                            {goalResults.realMode ? 'Live' : 'Demo'}
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GoalExecutionModal;